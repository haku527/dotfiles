vim9script
# 使用新版vim脚本

# 禁用vi兼容
set nocompatible

# 编码
if has('multi_byte')
    # 内部工作编码
    set encoding=utf-8
    # 文件默认编码
    set fileencoding=utf-8
    # 打开文件时自动尝试下面顺序的编码
    set fileencodings=ucs-bom,utf-8,gbk,gb18030,big5,euc-jp,latin1
endif

# 默认使用英语，linux下不行
if has('win32')
    language en_US
endif
# 启用左侧数字行
set number
# 启用语法高亮
syntax on
# 统一四字符缩进
const indent = 4
&tabstop = indent
&shiftwidth = indent
set expandtab
# 自动缩进
set autoindent
# 智能缩进
set smartindent
# 高亮匹配的括号
set showmatch
# 根据文件类型自动设置缩进
if has('autocmd')
    filetype plugin indent on
endif
# 智能判断大小写
set smartcase
# 高亮搜索内容
set hlsearch

# 一律使用系统剪贴板
if has("clipboard")
    set clipboard^=unnamed,unnamedplus
endif

# not using pack anymore
#
# if has('gui_running')
#     # 高亮当前行
#     set cursorline
#     # 高亮显示第80列
#     set colorcolumn=100
#     # 浅色or深色
#     set background=dark
#     packadd everforest
#     # g:everforest_background = 'hard'
#     g:everforest_better_performance = 1
#     g:everforest_disable_italic_comment = 1
#     colorscheme everforest
#     # 去掉不需要的菜单栏工具栏滚动条
#     set guioptions=
#     # 关闭光标闪烁
#     set guicursor+=a:blinkon0
#     # 设置窗口大小，lines是有多少行
#     set lines=35 columns=100
# endif
# 
# if has('gui_win32')
#     # 设置GUI字体，10.5磅字在win上刚好偶数像素高
#     set guifont=Maple\ Mono\ SC\ NF:h10.5
#     # windows字体渲染调整，还没整明白
#     set renderoptions=type:directx,renmode:5,taamode:1
# endif
# 
# if has('gui_gtk3')
#     set guifont=Monospace\ 12
# endif
#
# # 路径拼接
# # def JoinPath(path: list<string>): string
# #     var sep = "\\"
# #     var result = ""
# #     var i = 0
# #     while i < len(path)
# #         if i != 0
# #             result = result .. sep
# #         endif
# #         result = result .. path[i]
# #         i += 1
# #     endwhile
# #     return result
# # enddef
#
# # const path_of_pack = JoinPath(["~", "vimfiles", "pack"])
#
# # 看上去不需要packpath
# # set packpath+=path_of_pack

 
# # 以下为插件设置
# 
# # lightline：常驻状态栏，终端下不加载
# if has("gui_running")
#     packadd lightline
#     # 启用lightline
#     set laststatus=2
#     # 关闭自带的模式显示，有lightline后不需要了
#     set noshowmode
#     g:lightline = {"colorscheme": "everforest"}
# endif
# 
# # wincap.vim：让gvim标题栏使用背景色，仅限Win11
# if has("gui_win32")
#     packadd wincap
#     g:wincap_plugin_exe = $HOME ..
#         \ "/vimfiles/pack/default/opt/wincap/bin/wincap.exe"
# endif
# 
# # linux下fcitx5自动切换输入法
# if has('linux')
#     g:fcitx5_remote = '/usr/bin/fcitx5-remote'
#     packadd fcitx
# endif
# 
# # ale
# # if has('gui_running')
# #     packadd ale
# # endif
# 
# # vim9lsp
# # not configured
# # if has('gui_running')
# #     packadd lsp
# #
# #     var lspServers = [
# #         {
# #             filetype: ['py'],
# #             path: 'pyright',
# #             args: ['--stdio'],
# #         },
# #     ]
# #
# #     var lspOpts = {
# #         semanticHighlight: true,
# #         aleSupport: false,
# #         autoComplete: true,
# #         autoHighlight: false,
# #         autoHighlightDiags: true,
# #         autoPopulateDiags: false,
# #         completionMatcher: 'icase',
# #         completionMatcherValue: 1,
# #         echoSignature: false,
# #         hideDisabledCodeActions: false,
# #         highlightDiagInline: false,
# #         hoverInPreview: false,
# #         ignoreMissingServer: true,
# #         keepFocusInDiags: false,
# #         keepFocusInReferences: true,
# #         completionTextEdit: true,
# #         diagVirtualTextAlign: 'above',
# #         diagVirtualTextWrap: 'default',
# #         noNewlineInCompletion: false,
# #         omniComplete: false,
# #         outlineOnRight: false,
# #         outlineWinSize: 20,
# #         showDiagInBalloon: true,
# #         showDiagInPopup: true,
# #         showDiagOnStatusLine: false,
# #         showDiagWithSign: true,
# #         showDiagWithVirtualText: false,
# #         showInlayHints: false,
# #         showSignature: true,
# #         snippetSupport: false,
# #         ultisnipsSupport: false,
# #         useBufferCompletion: false,
# #         usePopupInCodeAction: false,
# #         useQuickfixForLocations: true,
# #         vsnipSupport: false,
# #         bufferCompletionTimeout: 0,
# #         customCompletionKinds: false,
# #         completionKinds: {},
# #         filterCompletionDuplicates: false,
# #     }
# #
# #     g:LspOptionsSet(lspOpts)
# #     g:LspAddServer(lspServers)
# # endif
# 
# # CoC：补全终极方案
# if has("gui_running")
#     # 让行号左侧的符号列一直显示
#     set signcolumn=yes
# 
#     packadd coc
#     # 依赖Nodejs
# 
#     # python
#     # CocInstall coc-pyright
#     # pip install pyright
# 
#     # js/ts
#     # CocInstall coc-tsserver
# 
#     # powershell
#     # CocInstall coc-powershell
# 
#     # 使用回车键确认选择
#     inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() :
#                 \ "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
#     # 使用tab键遍历选择
#     # 容易出错暂时停用
#     # inoremap <silent><expr> <TAB>
#     #   \ coc#pum#visible() ? coc#pum#next(1) :
#     #   \ CheckBackspace() ? "\<Tab>" :
#     #   \ coc#refresh()
#     # # 使用shift+tab反向遍历
#     # inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
# endif
# 
# # # 异步运行命令，结果显示在quickfix窗口
# # packadd arun
# 
# # nmap <leader>s :AsyncRun python %<CR>
# 
# # # 按键开关quickfix和locationlist窗口
# # packadd togglelist
# 
# # # 目前只用来开关quickfix
# # # nmap <script> <silent> <leader>l :call ToggleLocationList()<CR>
# # nmap <script> <silent> <leader>q :call ToggleQuickfixList()<CR>
# 
# # # fzf：fuzzy finder，浏览选择文件超级方案
# # # 让fzf使用vim主题
# # g:fzf_colors =
# # \ { 'fg':      ['fg', 'Normal'],
# #   \ 'bg':      ['bg', 'Normal'],
# #   \ 'hl':      ['fg', 'Comment'],
# #   \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
# #   \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
# #   \ 'hl+':     ['fg', 'Statement'],
# #   \ 'info':    ['fg', 'PreProc'],
# #   \ 'border':  ['fg', 'Ignore'],
# #   \ 'prompt':  ['fg', 'Conditional'],
# #   \ 'pointer': ['fg', 'Exception'],
# #   \ 'marker':  ['fg', 'Keyword'],
# #   \ 'spinner': ['fg', 'Label'],
# #   \ 'header':  ['fg', 'Comment'] }
# if has("win32") && has("gui_running") && has("terminal")
#     set termwintype=conpty
# endif
# 
# if has("gui_running")
# #     g:fzf_force_termguicolors = 1
#     highlight! link Terminal Normal
# endif
